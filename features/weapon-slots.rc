{
------------------------------
---- Cleanup weapon slots ----
------------------------------
-- Assigns weapons/staves to slots a and b.
-- Assigns ranged weapon to w (if not already in slot a or b).

--------------
---- Util ----
--------------
local function get_first_empty_slot()
  for slot=1,52 do
    if not items.inslot(slot) then return slot end
  end
end


local function is_early_slot_wpn(it)
  if not it then return false end
  local class = it.class(true)
  if class == "magical staff" then return true end
  if class == "weapon" then
    if it.is_ranged then return you.skill("Ranged Weapons") >= 4 end
	return true
  end
  
  return false
end

--------------
---- main ----
--------------
local do_cleanup_weapon_slots = false
local function cleanup_weapon_slots()
  local slot_w = items.letter_to_index("w")
  
  -- Move non-ranged, non-polearm weapons to slots a & b
  for i=0,1 do
    local inv = items.inslot(i)
    if not inv or inv.class(true) ~= "weapon" then
	  for replacement=0,51 do
		local it
		if replacement == 0 then
		  -- prioritize wielded weapon first
		  it = items.equipped_at("weapon")
		  if it and it.slot == 0 then it = nil end
		else
		  -- Prioritize moving slot w last
		  if replacement == 51 then it = items.inslot(slot_w)
		  elseif replacement >= slot_w then it = items.inslot(replacement + 1)
	      else it = items.inslot(replacement)
		  end
		end

		if is_early_slot_wpn(it) and it.weap_skill ~= "Polearms" then
		  items.swap_slots(it.slot, i)
		  break
		end
	  end
	end
  end

  -- Move polearms slots a & b
  for i=0,1 do
    local inv = items.inslot(i)
    if not inv or inv.class(true) ~= "weapon" then
	  for replacement=0,51 do
	    local it
		if replacement == 0 then 
		  -- prioritize wielded weapon first
		  it = items.equipped_at("weapon")
		  if it and it.slot == 0 then it = nil end
		else
		  -- Prioritize moving slot w last
		  if replacement == 51 then it = items.inslot(slot_w)
		  elseif replacement >= slot_w then it = items.inslot(replacement + 1)
	      else it = items.inslot(replacement)
		  end
		end
		
		if it and it.weap_skill == "Polearms" then
		  items.swap_slots(it.slot, i)
		  break
		end
	  end
	end
  end

  -- Move any ranged to slot w
  local slot_w = items.letter_to_index("w")
  local inv = items.inslot(slot_w)
  if not inv or inv.class(true) ~= "weapon" then
    for replacement = 1,51 do
	  local it
	  if replacement == 1 then
		-- prioritize wielded weapon first
		it = items.equipped_at("weapon")
		if it and it.slot < 2 then it = nil end
	  else
	    it = items.inslot(replacement)
	  end
		
	  if it and it.is_ranged then
		items.swap_slots(it.slot, slot_w)
		return
	  end
	end
  end

  -- Move any polearm to slot w
  local slot_w = items.letter_to_index("w")
  local inv = items.inslot(slot_w)
  if not inv or inv.class(true) ~= "weapon" then
    for replacement = 1,51 do
	  local it
	  if replacement == 1 then
		-- prioritize wielded weapon first
		it = items.equipped_at("weapon")
		if it and it.slot < 2 then it = nil end
	  else
	    it = items.inslot(replacement)
	  end
		
	  if it and (it.is_ranged or it.weap_skill == "Polearms") then
		items.swap_slots(it.slot, slot_w)
		return
	  end
	end
  end
  
  -- Move any 3rd weapon to slot w
  local slot_w = items.letter_to_index("w")
  local inv = items.inslot(slot_w)
  if not inv or inv.class(true) ~= "weapon" then
    for replacement = 1,51 do
	  local it
	  if replacement == 1 then
		-- prioritize wielded weapon first
		it = items.equipped_at("weapon")
		if it and it.slot < 2 then it = nil end
	  else
	    it = items.inslot(replacement)
	  end
	  
	  if it and it.class(true) == "weapon" then
		items.swap_slots(it.slot, slot_w)
		return
	  end
	end
  end
end



---------------------------------------------
------------------- Hooks -------------------
---------------------------------------------
function c_assign_invletter_weapon_slots(it)
  if it.class(true) ~= "weapon" and it.class(true) ~= "magical staff" then return end
  
  if is_early_slot_wpn(it) then
    for i=0,1 do
	  local inv = items.inslot(i)
	  if not inv then return i end
	  if not is_early_slot_wpn(inv) then
		items.swap_slots(i, get_first_empty_slot())
		return i
	  end
	end
  end
  
  local slot_w = items.letter_to_index("w")
  local inv = items.inslot(slot_w)
  if not inv then return slot_w end
  if inv.class(true) ~= "weapon" then
	items.swap_slots(slot_w, get_first_empty_slot())
	return slot_w
  end
  
  -- Bump a regular weapon out of slot w for a polearm or ranged weapon
  if (it.is_ranged or it.weap_skill == "Polearms")
      and not (inv.is_ranged or inv.weap_skill == "Polearms") then
    items.swap_slots(slot_w, get_first_empty_slot())
    return slot_w
  end
end



function c_message_weapon_slots(text, channel)
  if channel ~= "plain" then return end
  if not text:find("You drop ") then return end
  do_cleanup_weapon_slots = true
end



function ready_weapon_slots()
  if do_cleanup_weapon_slots then
    cleanup_weapon_slots()
    do_cleanup_weapon_slots = false
  end
end

}