include = pickup-alert/pa-util.rc
{
-------------------------------------------------------------------------------
---------------------------- Begin persistant data ----------------------------
-------------------------------------------------------------------------------
if not added_persistant_data or you.turns() == 0 then
  added_persistant_data = 1
  
  level_alerts = { }
  items_picked = { }
  items_alerted = { }
  rare_items = {"broad axe", "executioner's axe", "eveningstar", "demon whip", "sacred scourge",
                "lajatang", "bardiche", "demon trident", "trishula",
                "quick blade", "demon blade", "double sword", "triple sword", "eudemon blade",
                "crystal plate armour", "gold dragon scales", "pearl dragon scales", "storm dragon scales", "shadow dragon scales", 
                "triple crossbow", "hand crossbow", "buckler", "kite shield", "tower shield" }


  armour_high_score = 0
  local eq = items.equipped_at("body armour")
  if eq then armour_high_score = get_armour_ac(eq) end

  alerted_first_ranged_one_handed = 0
  alerted_first_ranged_two_handed = 0
  polearm_high_score = 0
  polearm_onehand_high_score = 0
  unbranded_high_score = 0
  weapon_high_score = 0
  
  eq = items.equipped_at("weapon")
  if eq then
    local eq_dmg = get_weap_dps(eq) + (eq.accuracy + eq.plus) / 2
    weapon_high_score = eq_dmg
    unbranded_high_score = get_weap_dps(eq, true) + eq.accuracy + eq.plus
    
    if eq.is_ranged then
      if get_hands(eq) == 1 then alerted_first_ranged_one_handed = 1
      else alerted_first_ranged_two_handed = 1 end
    elseif eq.weap_skill == "Polearms" then
      polearm_high_score = eq_dmg
      if get_hands(eq) == 1 then polearm_onehand_high_score = eq_dmg end
    end
  end
end


local function persist_table(table_name, table)
  local cmd = table_name.." = {"
  for _,v in ipairs(table) do
    cmd = cmd .. "\"" .. v .. "\", "
  end

  return cmd .. "\"\"}" .. string.char(10)
end

local function persist_var(var_name, var)
  return var_name .. " = " .. var .. string.char(10)
end


if not added_persistant_data_hooks then
  added_persistant_data_hooks = true
  
  table.insert(chk_lua_save, function() return persist_table("level_alerts", level_alerts) end)
  table.insert(chk_lua_save, function() return persist_table("rare_items", rare_items) end)
  table.insert(chk_lua_save, function() return persist_table("items_picked", items_picked) end)
  table.insert(chk_lua_save, function() return persist_table("items_alerted", items_alerted) end)
  table.insert(chk_lua_save, function() return persist_var("armour_high_score", armour_high_score) end)
  table.insert(chk_lua_save, function() return persist_var("alerted_first_ranged_one_handed", alerted_first_ranged_one_handed) end)
  table.insert(chk_lua_save, function() return persist_var("alerted_first_ranged_two_handed", alerted_first_ranged_two_handed) end)
  table.insert(chk_lua_save, function() return persist_var("polearm_high_score", polearm_high_score) end)
  table.insert(chk_lua_save, function() return persist_var("polearm_onehand_high_score", polearm_onehand_high_score) end)
  table.insert(chk_lua_save, function() return persist_var("unbranded_high_score", unbranded_high_score) end)
  table.insert(chk_lua_save, function() return persist_var("weapon_high_score", weapon_high_score) end)
  
  table.insert(chk_lua_save, function() return persist_var("added_persistant_data", 1) end)
end

----------------------------------------
---- Accessors into persistant data ----
----------------------------------------
function get_rare_item_index(it)
  local qualname = it.name("qual")
  for i,v in ipairs(rare_items) do
    if v ~= "" and qualname:find(v) then 
    return i end
  end
  return -1
end


function check_high_scores(it)
  local ret_val = nil
  
  if it.class(true) == "armour" then
    local ac = get_armour_ac(it)
    if ac > armour_high_score then
      armour_high_score = ac
      if not ret_val then ret_val = "Strongest armour" end
    end
  elseif it.class(true) == "weapon" then
    local it_plus = it.plus
    if not it_plus then it_plus = 0 end
    local score = get_weap_dps(it) + (it.accuracy + it_plus) / 2
    if score > weapon_high_score then
      weapon_high_score = score
      if not ret_val then ret_val = "Good weapon" end
    end
    
    local unbranded_score = get_weap_dps(it, false) + (it.accuracy + it_plus) / 2
    if unbranded_score > unbranded_high_score then
      unbranded_high_score = score
      if not ret_val then ret_val = "High pure damage" end
    end
    
    if it.weap_skill == "Polearms" then
      if score > polearm_high_score then
        polearm_high_score = score
        if not items.equipped_at("shield") and not ret_val then ret_val = "Good polearm" end
      end

      if get_hands(it) == 1 and score > polearm_onehand_high_score then
        polearm_onehand_high_score = score
        if not ret_val then ret_val = "1-handed polearm" end
      end
    end
  end

  return ret_val
end


function pickup_item(it)
  local ret_val = false
  local name = it.name("plain")
  if not it.fully_identified then
    name = "+0 " .. name
  end

  if it.artefact then
    ret_val = true
  elseif not util.contains(items_picked, name) then
    -- Add to the table on pickup, in c_assign_invletter() hook function
    ret_val = true
  end
  
  -- Remove from rare_items if it's there
  for i,v in ipairs(rare_items) do
    if name:find(v) then
      util.remove(rare_items, rare_items[i])
      return true
    end
  end
  
  -- Returns true if we haven't picked up this item previously
  return ret_val
end


function alert_item(it, alert_type)
  local name = it.name("plain")
  
  if (it.artefact or it.branded) and not it.fully_identified then
    if util.contains(items_alerted, name) then return end
    table.insert(items_alerted, name)
    show_alert_msg("Item alert, "..alert_type..": ", name)
	table.insert(level_alerts, name)
    return
  end
  
  -- Prefix unidentified items with "+0"
  if not it.fully_identified then
    name = "+0 " .. name
  end

  if not util.contains(items_alerted, name) then
    if it.class(true) == "weapon" or it.class(true) == "magical staff" then
      show_alert_msg("Item alert, "..alert_type..": ", name.." "..get_weapon_info(it))
	  table.insert(level_alerts, name)
    elseif it.class(true) == "armour" then
      show_alert_msg("Item alert, "..alert_type..": ", name.." "..get_armour_info(it))
	  table.insert(level_alerts, name)
    else
      show_alert_msg("Item alert, "..alert_type..": ", name)
	  table.insert(level_alerts, name)
    end

    insert_item_and_less_enchanted(items_alerted, name)
  end
  
  -- Returns true to make other code more concise; indicates that we tried to alert this item
  return true
end
crawl.setopt("runrest_stop_message += Item alert, ")



---------------------------------------------
------------------- Hooks -------------------
---------------------------------------------

function c_assign_invletter_item_alerts(it)
  local name = it.name("plain")
  if it.weap_skill or it.class(true) == "armour" then
    if not util.contains(items_picked, name) then
      insert_item_and_less_enchanted(items_picked, name)
      insert_item_and_less_enchanted(items_alerted, name)
      check_high_scores(it)
      
      for i, v in ipairs(rare_items) do
        if name:find(v) then util:remove(rare_items, rare_items[i]) end
      end
    end
  end
  
  if util.contains(level_alerts, name) then util.remove(level_alerts, name) end
end

function c_message_item_alerts(text, channel)
  if text:find("Done exploring.") or text:find("Partly explored") then
    local all_alerts
	for _, v in ipairs(level_alerts) do
	  if not all_alerts then all_alerts = v
	  else all_alerts = all_alerts..", "..v
	  end
	end
	
	level_alerts = {}
	crawl.mpr("<magenta>Level alerts: "..all_alerts.."</magenta>")
  end
end
}