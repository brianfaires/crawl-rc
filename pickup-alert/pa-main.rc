include = pickup-alert/pa-data.rc

{
----------------------------------------
---- Persistant data access / logic ----
----------------------------------------
function update_high_scores(it)
  local ret_val = nil
  
  if it.class(true) == "armour" then
    local ac = get_armour_ac(it)
    if ac > armour_high_score then
      armour_high_score = ac
      if not ret_val then ret_val = "Strongest armour" end
    end
  elseif it.class(true) == "weapon" then
    local it_plus = it.plus
    if not it_plus then it_plus = 0 end
    local score = get_weap_dps(it) + (it.accuracy + it_plus) / 2
    if score > weapon_high_score then
      weapon_high_score = score
      if not ret_val then ret_val = "Good weapon" end
    end
    
    local unbranded_score = get_weap_dps(it, false) + (it.accuracy + it_plus) / 2
    if unbranded_score > unbranded_high_score then
      unbranded_high_score = score
      if not ret_val then ret_val = "High pure damage" end
    end
    
    if it.weap_skill == "Polearms" then
      if score > polearm_high_score then
        polearm_high_score = score
        if not items.equipped_at("shield") and not ret_val then ret_val = "Good polearm" end
      end

      if get_hands(it) == 1 and score > polearm_onehand_high_score then
        polearm_onehand_high_score = score
        if not ret_val then ret_val = "1-handed polearm" end
      end
    end
  end

  return ret_val
end


function alert_item(it, alert_type)
  local name = it.name("plain")
  if not it.fully_identified then name = "+0 " .. name end

  if not previously_alerted(it) and not previously_picked(it) then
    if it.class(true) == "weapon" or it.class(true) == "magical staff" then
      show_alert_msg("Item alert, "..alert_type..": ", name.." "..get_weapon_info(it))
    elseif it.class(true) == "armour" then
      show_alert_msg("Item alert, "..alert_type..": ", name.." "..get_armour_info(it))
    else
      show_alert_msg("Item alert, "..alert_type..": ", name)
    end

    insert_item_and_less_enchanted(items_alerted, it)
    table.insert(level_alerts, name)
  end
  
  -- Returns true to make other code more concise; indicates that we tried to alert this item
  return true
end
crawl.setopt("runrest_stop_message += Item alert, ")




---------------------------------------------
------------------- Hooks -------------------
---------------------------------------------
function c_assign_invletter_item_alerts(it)
  local name = it.name("plain")
  if it.delay or it.class(true) == "armour" then
    if not previously_picked(it) then
      insert_item_and_less_enchanted(items_picked, it)
      update_high_scores(it)
      remove_from_rare_items(it)
    end
  end
  
  remove_item_and_less_enchanted(items_alerted, it)
  util.remove(level_alerts, name)
end

function c_message_item_alerts(text, channel)
  if text:find("Done exploring.") or text:find("Partly explored") then
    local all_alerts = ""
    for v in iter.invent_iterator:new(level_alerts) do
      if all_alerts == "" then all_alerts = v
      else all_alerts = all_alerts..", "..v
      end
    end
    
    level_alerts = {}
    crawl.mpr("<magenta>Level alerts: "..all_alerts.."</magenta>")
  end
end

function ready_item_alerts()
  for it in iter.invent_iterator:new(items.inventory()) do
    if it.delay then update_high_scores(it, false)
    elseif it.subtype() == "body" then update_high_scores(it, true)
    end
  end
end

-------------------------------------------------
------------------- End Hooks -------------------
-------------------------------------------------



-------------------------
---- Autopickup main ----
-------------------------
add_autopickup_func(function (it, name)
  local class = it.class(true)

  -- Check for pickup
  local retVal = false
  if class == "armour" and loaded_pa_armour then retVal = pickup_armour(it)
  elseif class == "weapon" and loaded_pa_weapons then retVal = pickup_weapons(it)
  elseif class == "magical staff" and loaded_pa_misc then retVal = pickup_staves(it)
  end

  if retVal == true then
    remove_from_rare_items(it)
    return true
  end

  -- Update inventory high scores before alerting; in case XP gained same turn item is dropped
  ready_item_alerts()

  -- Not picking up this item. Check for alerts
  if loaded_pa_misc then
    alert_rare_items(it)
    if class == "magical staff" then alert_staves(it) end
  end

  if it.name("base") == "orb" and loaded_pa_misc then alert_orbs(it)
  elseif class == "armour" and loaded_pa_armour then alert_armour(it)
  elseif class == "weapon" and loaded_pa_weapons then alert_weapons(it)
  end
end)
}