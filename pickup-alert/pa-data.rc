include = pickup-alert/pa-util.rc
{
-------------------------------------------------------------------------------
---------------------------- Begin persistant data ----------------------------
-------------------------------------------------------------------------------
if not added_persistant_data or you.turns() == 0 then
  added_persistant_data = 1

  level_alerts = { }
  items_picked = { }
  items_alerted = { }
  rare_items = {"broad axe", "executioner's axe", "eveningstar", "demon whip", "sacred scourge",
                "lajatang", "bardiche", "demon trident", "trishula",
                "quick blade", "demon blade", "double sword", "triple sword", "eudemon blade",
                "crystal plate armour", "gold dragon scales", "pearl dragon scales", "storm dragon scales", "shadow dragon scales", 
                "triple crossbow", "hand crossbow", "buckler", "kite shield", "tower shield" }

  armour_high_score = 0
  alerted_first_ranged_one_handed = 0
  alerted_first_ranged_two_handed = 0
  polearm_high_score = 0
  polearm_onehand_high_score = 0
  unbranded_high_score = 0
  weapon_high_score = 0
end


local function persist_table(table_name, table)
  local cmd_init = table_name.." = {"
  local cmd = cmd_init
  for v in iter.invent_iterator:new(table) do
    if cmd ~= cmd_init then cmd = cmd..", " end
	cmd = cmd.."\""..v.."\""
  end
  
  return cmd .. "}" .. string.char(10)
end

local function persist_var(var_name, var)
  return var_name .. " = " .. var .. string.char(10)
end


if not added_persistant_data_hooks then
  added_persistant_data_hooks = true
  
  table.insert(chk_lua_save, function() return persist_table("level_alerts", level_alerts) end)
  table.insert(chk_lua_save, function() return persist_table("rare_items", rare_items) end)
  table.insert(chk_lua_save, function() return persist_table("items_picked", items_picked) end)
  table.insert(chk_lua_save, function() return persist_table("items_alerted", items_alerted) end)
  table.insert(chk_lua_save, function() return persist_var("armour_high_score", armour_high_score) end)
  table.insert(chk_lua_save, function() return persist_var("alerted_first_ranged_one_handed", alerted_first_ranged_one_handed) end)
  table.insert(chk_lua_save, function() return persist_var("alerted_first_ranged_two_handed", alerted_first_ranged_two_handed) end)
  table.insert(chk_lua_save, function() return persist_var("polearm_high_score", polearm_high_score) end)
  table.insert(chk_lua_save, function() return persist_var("polearm_onehand_high_score", polearm_onehand_high_score) end)
  table.insert(chk_lua_save, function() return persist_var("unbranded_high_score", unbranded_high_score) end)
  table.insert(chk_lua_save, function() return persist_var("weapon_high_score", weapon_high_score) end)
  
  table.insert(chk_lua_save, function() return persist_var("added_persistant_data", 1) end)
end

----------------------------------------
---- Accessors into persistant data ----
----------------------------------------
function get_rare_item_index(it)
  local qualname = it.name("qual")
  for i,v in ipairs(rare_items) do
	if v ~= "" and qualname:find(v) then return i end
  end
  return -1
end

-- Remove starting items from rare_items
if you.turns() == 0 then  
  for inv in iter.invent_iterator:new(items.inventory()) do
	local idx = get_rare_item_index(inv)
	if idx ~= -1 then util.remove(rare_items, rare_items[idx]) end
  end
end
}