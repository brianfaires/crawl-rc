{
function show_alert_msg(alert_text, item_name)
  crawl.mpr("<cyan>----<magenta>"..alert_text.."<yellow>"..item_name.."</yellow></magenta>----</cyan>")
end

-- Add an item name to a table, along with all less enchanted versions
-- e.g. "+3 flail" will add: "+3 flail", "+2 flail", "+1 flail", "+0 flail"
function insert_item_and_less_enchanted(table_name, item_name)
  if util.contains(table_name, item_name) then return end
  table.insert(table_name, item_name)

  -- Add less enchanted items too
  local plus = tonumber(item_name:sub(2,2))
  if not plus then return end
    
  if plus > 0 then
    if tonumber(item_name:sub(3,3)) then
      plus = 10 * plus + tonumber(item_name:sub(3,3))
    end

    for i=plus,1,-1 do
      item_name = item_name:gsub("+"..i, "+"..(i-1))
      table.insert(table_name, item_name)
    end
  end
end


function has_ego(it)
  if it.class(true) == "weapon" then return it.branded end
  
  if it.artefact then return true end
  if it.branded then return true end
  local qualname = it.name("qual")
  if qualname:find("troll leather") then return true end
  if qualname:find("dragon scales") then return true end
  return false
end


function get_size_factor()
  local race = you.race()
  if race == "Spriggan" then return 4
  elseif race == "Kobold" then return 2
  elseif race == "Formicid" or race == "Armataur" or race == "Naga" or race == "Ogre" or race == "Troll" then return -2
  else return 0
  end
end


function get_shield_penalty(sh)
  return 2/5 * sh.encumbrance * sh.encumbrance / (20 - 3 * get_size_factor()) * (27 - you.skill("Shields")) / 27
end


local summon_gods = { "Beogh", "Jiyva", "Yredelemnul" }
function you_have_summons()
  return you.skill("Summonings") + you.skill("Necromancy") > 0 or util.contains(summon_gods, you.god())
end

--------------------------------------------------
--------------------- Armour ---------------------
--------------------------------------------------
function get_armour_ac(it)
  local it_plus = it.plus
  if not it_plus then it_plus = 0 end
  
  if it.artefact and it.fully_identified then
    local art_ac = it.artprops["AC"]
    if art_ac then it_plus = it_plus + art_ac end
  end

  if it.artefact and it.fully_identified then
    local art_ac = it.artprops["AC"]
    if art_ac then it_plus = it_plus + art_ac end
  end
  
  local it_ac = it.ac
  if you.get_base_mutation_level("deformed body", true, false, false) > 0 then it_ac = it_ac / 2 end
  
  return it_ac * (you.skill("Armour") / 22 + 1) + it_plus 
end


function get_shield_sh(it)
  local dex = you.dexterity()
  if it.artefact and it.fully_identified then
    local art_dex = it.artprops["Dex"]
    if art_dex then dex = dex + art_dex end
  end
  
  local cur = items.equipped_at("shield")
  if cur and cur.artefact and cur.slot ~= it.slot then
    local art_dex = cur.artprops["Dex"]
    if art_dex then dex = dex - art_dex end
  end

  local it_plus = it.plus
  if not it_plus then it_plus = 0 end
  
  local it_ac = it.ac
  if you.get_base_mutation_level("deformed body", true, false, false) > 0 then it_ac = it_ac / 2 end
  
  local block = it_ac
  local race = you.race()
  if race == "Spriggan" then
    if it.name("base"):find("buckler") then block = block + 2 end
  elseif race == "Kobold" then
    local basename = it.name("base")
	if basename:find("buckler") then block = block + 1
	elseif basename:find("kite shield") then block = block + 0.5 end
  elseif race == "Ogre" or race == "Troll" then
    if it.name("base"):find("kite shield") then block = block - 0.5 end
  end
  
  
  local stat_bonus = dex * 38 * (it_ac + 13) / 5200
  
  local skill = you.skill("Shields")
  local addend
  if skill >= 3 then addend = .38*skill
  else addend = .57 + 0.19*skill
  end
  
  return block * (1+skill/40) + it_plus + stat_bonus + addend
end

function get_armour_ev(it)
  -- This function computes the armour-based component to standard EV (not paralysed, etc)
  -- Factors in stat changes for this armour and currently worn
  local race = you.race()
  local str = you.strength()
  local dex = you.dexterity()
  local it_plus = 0
  
  -- Adjust str/dex/EV for artefact stat changes
  if not it.equipped then
    local worn = items.equipped_at("body armour")
    if worn and worn.artefact then
      if worn.artprops["Str"] then str = str - worn.artprops["Str"] end
      if worn.artprops["Dex"] then dex = dex - worn.artprops["Dex"] end
      if worn.artprops["EV"] then it_plus = it_plus - worn.artprops["EV"] end
    end
    
    if it.artefact then
      if it.artprops["Str"] then str = str + it.artprops["Str"] end
      if it.artprops["Dex"] then dex = dex + it.artprops["Dex"] end
      if it.artprops["EV"] then it_plus = it_plus + it.artprops["EV"] end
    end
  end
  
  local size_factor = get_size_factor()
  
  local dodge_bonus = (7 + you.skill("Dodging") * dex) / (20 - size_factor)
  armor_penalty = it.encumbrance - 3

  local modifier = 0
  if armor_penalty < 0 then modifier = 1
  elseif armor_penalty > 0 then
    if armor_penalty >= str then modifier = str / (armor_penalty * 2)
    else modifier = 1 - armor_penalty / (str * 2)
    end
  end

  local final_dodge_bonus = dodge_bonus * modifier
  local aevp = 2 * it.encumbrance * it.encumbrance * (45 - you.skill("Armour")) / (5 * (str + 3) * 45)

  return final_dodge_bonus - aevp + it_plus
end


---------------------------------------------------
--------------------- Weapons ---------------------
---------------------------------------------------
function get_hands(it)
  if you.race() ~= "Formicid" then return it.hands end
  st, _ = it.subtype()
  if st == "giant club" or st == "giant spiked club" then return 2 end
  return 1
end


function get_weap_min_delay(it)
  -- This is an abbreviated version of the actual calculation.
  -- Intended only to be used to prevent skill from reducing too far in get_weap_delay()
  local basename = it.name("base")
  local st, _ = it.subtype()
  local base_delay = it.delay
  
  local min_delay = base_delay / 2
  if it.weap_skill == "Short Blades" and min_delay > 5 then min_delay = 5 end
  if min_delay > 7 then min_delay = 7 end
  
  if basename:find("longbow") then min_delay = 6
  elseif (basename:find("crossbow") or basename:find("arbalest")) and min_delay < 10 then min_delay = 10 end
  
  return min_delay
end


function get_weap_delay(it)
  local delay = it.delay - you.skill(it.weap_skill)/2
  local min_delay = get_weap_min_delay(it)
  if delay < min_delay then delay = min_delay end
  
  if it.ego() == "Speed" then delay = delay * 2 / 3 end
  
  if delay < 3 then delay = 3 end
  
  local sh = items.equipped_at("shield")
  if sh then delay = delay + get_shield_penalty(sh) end
  
  return delay / 10
end


function get_slay_bonuses()
  local sum = 0

  -- Slots can go as high as 18 afaik
  for i = 0,20 do
    it = items.equipped_at(i)
    if it then
      if it.name("base") == "ring" then
        if it.artefact then
          local name = it.name()
          local idx = name:find("Slay+")
          if idx then
            local slay = tonumber(name:sub(idx+5, idx+5))
            if slay == 1 then
              local next_digit = tonumber(name:sub(idx+6, idx+6))
              if next_digit then slay = 10 + next_digit end
            end
            sum = sum + slay
          end
        elseif it.ego(true) == "Slay" then 
          sum = sum + it.plus 
        end
      elseif it.artefact and (it.class(true) == "armour" or it.name("base") == amulet) then
          local slay = it.artprops["Slay"]
          if slay then sum = sum + slay end
      end
    end
  end
  
  if you.race() == "Demonspawn" then
    sum = sum + 3 * you.get_base_mutation_level("augmentation", true, false, true)
    sum = sum + you.get_base_mutation_level("sharp scales", true, false, true)
  end

  return sum
end


function get_staff_bonus_dmg(it, no_brand_dmg)
  if no_brand_dmg and basename ~= "staff of earth" and basename ~= "staff of conjuration" then return 0 end
  
  local evo_skill = you.skill("Evocations")
  local basename = it.name("base")
  local school
  if basename == "staff of fire" then school = "Fire Magic"
  elseif basename == "staff of cold" then school = "Ice Magic"
  elseif basename == "staff of earth" then school = "Earth Magic"
  elseif basename == "staff of air" then school = "Air Magic"
  elseif basename == "staff of poison" then school = "Poison Magic"
  elseif basename == "staff of death" then school = "Necromancy"
  elseif basename == "staff of conjuration" then school = "Conjurations"
  else
    crawl.mpr("ERROR:UNRECOGNIZED STAFF:"..it.name("base"), error)
    return 0
  end
  
  local spell_skill = you.skill(school)
  local chance = (evo_skill + spell_skill/2) / 15
  if chance > 1 then chance = 1 end
  -- 0.625 is an acceptable approximation
  -- Earth magic does more, but reduced by armour. Poison/draining bonus effects are ignored.
  local avg_dmg = 0.625 * (evo_skill/2 + spell_skill)
  return avg_dmg*chance
end


function get_weap_dps(it, no_brand_dmg)
  -- Returns an adjusted weapon damage = damage * speed
  -- Includes stat/slay changes between weapon and the one currently wielded
  -- Aux attacks not included
  local it_plus = it.plus
  if not it_plus then it_plus = 0 end

  -- Adjust str/dex/slay from artefacts
  local str = you.strength()
  local dex = you.dexterity()
  
  -- Adjust str/dex/EV for artefact stat changes
  if not it.equipped then
    local wielded = items.equipped_at("weapon")
    if wielded and wielded.artefact then
      if wielded.artprops["Str"] then str = str - wielded.artprops["Str"] end
      if wielded.artprops["Dex"] then dex = dex - wielded.artprops["Dex"] end
      if wielded.artprops["Slay"] then it_plus = it_plus - wielded.artprops["Slay"] end
    end
    
    if it.artefact and it.fully_identified then
      if it.artprops["Str"] then str = str + it.artprops["Str"] end
      if it.artprops["Dex"] then dex = dex + it.artprops["Dex"] end
      if it.artprops["Slay"] then it_plus = it_plus + it.artprops["Slay"] end
    end
  end
  
  if it.is_ranged or it.weap_skill:find("Blades") then stat = dex
  else stat = str end

  local stat_mod = 0.75 + 0.025 * stat
  local skill_mod = (1 + you.skill(it.weap_skill)/25/2) * (1 + you.skill("Fighting")/30/2)
  
  local pre_brand_dmg = it.damage * stat_mod * skill_mod + it_plus + get_slay_bonuses()
  
  
  if it.class(true) == "magical staff" then 
    return (pre_brand_dmg + get_staff_bonus_dmg(it, no_brand_dmg)) / get_weap_delay(it)
  end
  
  local ego = it.ego()
  if not ego then return pre_brand_dmg / get_weap_delay(it) end

  if ego == "spectralizing" then return 2 * pre_brand_dmg / get_weap_delay(it) end
  if ego == "vorpality" then
    if it.is_ranged then return 1.2 * pre_brand_dmg / get_weap_delay(it) end
    return 7/6 * pre_brand_dmg / get_weap_delay(it)
  end
  
  if not no_brand_dmg then
    if ego == "flaming" or ego == "freezing" then return 1.25 * pre_brand_dmg  / get_weap_delay(it) end
    if ego == "draining" then return (1.25 * pre_brand_dmg + 2) / get_weap_delay(it) end 
    if ego == "electrocution" then return (pre_brand_dmg + 3.5) / get_weap_delay(it) end
    -- Ballparking venom as 5 dmg since it totally breaks the paradigm
    if ego == "venom" then return (pre_brand_dmg + 5) / get_weap_delay(it) end
    if ego == "pain" then return (pre_brand_dmg + you.skill("Necromancy")/2) / get_weap_delay(it) end
    -- Distortion does 5.025 extra dmg, + 5% chance to banish
    if ego == "distortion" then return (pre_brand_dmg + 6) / get_weap_delay(it) end
    -- Weighted average of all the easily computed brands was ~ 1.17*dmg + 2.13
    if ego == "chaos" then return (1.25 * pre_brand_dmg + 2) / get_weap_delay(it) end
  end
  
  return pre_brand_dmg / get_weap_delay(it)
end


-----------------------------
---- Weapon info strings ----
-----------------------------
function get_weapon_info(it)
  if not it.weap_skill then return end
  local dps = get_weap_dps(it)
  local dps_str = string.format("%.2f", dps)
      
  local it_plus = it.plus
  if not it_plus then it_plus = 0 end
  local acc = it.accuracy + it_plus
  if acc >= 0 then acc = "+"..acc end
  
  dps_str = "DPS="..dps_str
  if dps < 10 then dps_str = dps_str.." " end
  return dps_str.."(Acc"..acc..")"
end


function get_armour_info(it)
  if not it or it.class(true) ~= "armour" then return end
  
  if it.subtype() == "shield" then
    local ev = get_shield_penalty(it)
    local ev_str = string.format("%.2f", ev)
    ev_str = "-"..ev_str
  
    local sh = get_shield_sh(it)
    local sh_str = string.format("%.2f", sh)
    if sh >= 0 then sh_str = "+"..sh_str end
    sh_str = "SH"..sh_str..","
    if sh < 10 then sh_str = sh_str.." " end

    return sh_str.."EV"..ev_str
  else
    local ev = get_armour_ev(it)
    local ev_str = string.format("%.2f", ev)
    if ev >= 0 then ev_str = "+"..ev_str end

    local ac = get_armour_ac(it)
    local ac_str = string.format("%.2f", ac)
    if ac >= 0 then ac_str = "+"..ac_str end
    ac_str = "AC"..ac_str..","
    if ac < 10 then ac_str = ac_str.." " end
    
	return ac_str.."EV"..ev_str
  end  
end
}