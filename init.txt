#################################
####### Main options ############
#################################
autofight_stop = 65
hp_warning = 20
mouse_input = false
item_stack_summary_minimum = 8
default_manual_training = true
autofight_caught = true
rest_wait_both = true
rest_wait_ancestor = true
easy_confirm = all
sort_menus = true:equipped,art,ego,glowing,identified,basename,qualname,>qty
drop_filter += useless_item, forbidden
fire_order = silver javelin, javelin, silver boomerang, boomerang, curare-tipped dart, poisoned dart, stone



#################################
####### Explore options #########
#################################
explore_wall_bias = 6
explore_delay = -1
travel_delay = -1
rest_delay = -1
view_delay = 100
show_travel_trail = true

explore_greedy_visit = artefacts,glowing_items,stacks
explore_stop = artefacts,altars,branches,portals,runed_doors,greedy_pickup_smart
explore_stop_pickup_ignore += scroll, potion, wand, stone, dart, boomerang, javelin


#######################################
####### Autopickup exceptions #########
#######################################
ae := autopickup_exceptions
ae ^= <potions? of attraction, <potions? of lignification, <potions? of mutation
ae ^= <scrolls? of immolation, <scrolls? of poison
ae ^= >useless_item, <misc
# Exclude the 3rd copy of any ring
{
  add_autopickup_func(function (it, name)
    if it.class(true) ~= "jewellery" or it.artefact or you.race() == "Octopode" then return end
    local st = it.subtype()
    local found_first = false
    for inv in iter.invent_iterator:new(items.inventory()) do
      if inv.class(true) == "jewellery" and inv.subtype() == st then
        if found_first then return false end
        found_first = true
      end
    end
  end)
}


#############################
####### RC files ############
#############################

### Mostly normal RC options ###
include = rc/autoinscribe.rc
include = rc/display.rc
lua_file = crawl-rc/lua/display-damage.lua
include = rc/dynamic-options.rc
include = rc/fm-messages.rc
include = rc/fm-monsters.rc
include = rc/macros.rc
include = rc/runrest.rc
include = rc/slot-defaults.rc
include = rc/startup.rc


### Pickup and alert ###
include = rc/pickup-alert/pa-armour.rc
include = rc/pickup-alert/pa-misc.rc
include = rc/pickup-alert/pa-weapons.rc


### Features ###
include = rc/features/drop-inferior.rc
include = rc/features/inscribe-stats.rc
include = rc/features/runrest-features.rc
include = rc/features/safe-stairs.rc

lua_file = crawl-rc/lua/features/after-shaft.lua
lua_file = crawl-rc/lua/features/exclude-dropped.lua
lua_file = crawl-rc/lua/features/misc-alerts.lua
lua_file = crawl-rc/lua/features/mute-swaps.lua
lua_file = crawl-rc/lua/features/remind-id.lua
lua_file = crawl-rc/lua/features/weapon-slots.lua


####################################################################
######################## Lua Hook Functions ########################
####################################################################
{
----------------------------------
---------- c_message() -----------
----------------------------------
function c_message(text, channel)
  if c_message_remind_identify then c_message_remind_identify(text, channel) end
  if c_message_weapon_slots then c_message_weapon_slots(text, channel) end
  if c_message_exclude_dropped then c_message_exclude_dropped(text, channel) end
  if c_message_search_altars_in_temple then c_message_search_altars_in_temple(text, channel) end
  if c_message_fully_recover then c_message_fully_recover(text, channel) end
  if c_message_mute_swaps then c_message_mute_swaps(text, channel) end
  if c_message_after_shaft then c_message_after_shaft(text, channel) end
  if c_message_item_alerts then c_message_item_alerts(text, channel) end
  if c_message_ignore_gauntlet_msgs then c_message_ignore_gauntlet_msgs(text, channel) end
end


-------------------------------------------
---------- c_assign_inv_letter() ----------
-------------------------------------------
function c_assign_invletter(it)
  -- Calls with no return values; just triggering on new item pickup
  if c_assign_invletter_item_alerts then c_assign_invletter_item_alerts(it) end
  if c_assign_invletter_remind_identify then c_assign_invletter_remind_identify(it) end
  if c_assign_invletter_exclude_dropped then c_assign_invletter_exclude_dropped(it) end
  if c_assign_invletter_drop_inferior then c_assign_invletter_drop_inferior(it) end
  if c_assign_invletter_mute_swaps then c_assign_invletter_mute_swaps(it) end
    
  -- Calls with possible return values
  local ret_val = nil
  if c_assign_invletter_weapon_slots then ret_val = c_assign_invletter_weapon_slots(it) end
  if ret_val then return ret_val end
end


---------------------------
---- ch_stop_running() ----
---------------------------
function ch_stop_running(kind)
  if ch_stop_running_full_recovery then ch_stop_running_full_recovery(kind) end
end


---------------------------
--------- ready() ---------
---------------------------
local last_turn = -1
local last_write_counter = 0
function ready()
  if you.turns() == last_turn then return end
  last_turn = you.turns()
 
  if ready_force_mores then ready_force_mores() end
  if ready_dynamic_options then ready_dynamic_options() end
  if ready_inscribe_stats then ready_inscribe_stats() end
  if ready_weapon_slots then ready_weapon_slots() end
  if ready_safe_consumables then ready_safe_consumables() end
  if ready_mute_swaps then ready_mute_swaps() end
  if ready_ignore_altars then ready_ignore_altars() end
  if ready_ignore_exits then ready_ignore_exits() end
  if ready_after_shaft then ready_after_shaft() end
  if ready_fully_recover then ready_fully_recover() end
  if ready_safe_stairs then ready_safe_stairs() end
  if ready_item_alerts then ready_item_alerts() end
  if ready_misc_alerts then ready_misc_alerts() end
end


-----------------------------
---- Prompt auto-answers ----
-----------------------------
function c_answer_prompt(prompt)
  if prompt:find("cheaper one?") then
    crawl.mpr("Replacing shopping list items", "plain")
    return true end
  if prompt == "Die?" then return false end  
end

--Call ready() once before autopickup/alerts trigger
ready()

}