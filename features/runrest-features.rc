{
--------------------------------
---- Fully rest off effects ----
--------------------------------
crawl.setopt("runrest_ignore_message += recovery:.*")
crawl.setopt("runrest_ignore_message += duration:.*")

local function fully_recovered()
  -- Confirm sure HP and MP are full
  local hp, mhp = you.hp()
  if hp ~= mhp then return false end
  local mp, mmp = you.mp()
  if mp ~= mmp then return false end
  
  -- Statuses that will always rest off
  local status_wait = { "berserk", "short of breath", "corroded", "vulnerable", "confused", "marked", "tree%-form", "sluggish" }
  local status = you.status()

  for s in iter.invent_iterator:new(status_wait) do
    if status:find(s) then return false end
  end
  
  -- If negative stats, don't rest off slow
  if status:find("slowed") then
    return you.strength() <= 0 or you.dexterity() <= 0 or you.intelligence() <= 0
  end

  return true
end

local waiting_for_recovery = false
local explore_after_recovery = false

-- Attach full recovery to auto-explore
function explore_full_recovery()
  if fully_recovered() then
    crawl.do_commands({"CMD_EXPLORE"})
  else
    explore_after_recovery = true
    crawl.do_commands({"CMD_REST"})
  end
end
crawl.setopt("macros += M o ===explore_full_recovery")



-------------------------------------
---- Hooks (All functions below) ----
-------------------------------------

--------------------------------
---- rest off effects cont. ----
--------------------------------
function ch_stop_running_full_recovery(kind)
  if kind == "run" and not fully_recovered() then
    waiting_for_recovery = true
    crawl.setopt("message_colour += mute:You start waiting.")
  end
end

function c_message_fully_recover(text, channel)
  if text:find("You start waiting.") or text:find("You start resting.") then
    if not fully_recovered() then
      waiting_for_recovery = true
      crawl.setopt("message_colour += mute:You start waiting.")
    end
  elseif waiting_for_recovery then
    you.stop_activity()
  end
end

function ready_fully_recover()
  if waiting_for_recovery then
    if fully_recovered() then
      you.stop_activity()
      crawl.setopt("message_colour -= mute:You start waiting.")
      waiting_for_recovery = false
      crawl.mpr("Fully recovered.")
      
      if explore_after_recovery then
        crawl.sendkeys("o")
        explore_after_recovery = false
      end
    elseif not you.feel_safe() then
      you.stop_activity()
      waiting_for_recovery = false
      explore_after_recovery = false
    else
      crawl.do_commands({"CMD_SAFE_WAIT"})
    end
  else
    explore_after_recovery = false
  end
end

---------------------------------------------------------------------
---- End Fully rest off effects (Hooks for other features cont.) ----
---------------------------------------------------------------------

----------------------
---- Ignore altars ----
-----------------------
local stop_on_altars = true

function ready_ignore_altars()
  if stop_on_altars and (you.god() ~= "No God" or you.branch() == "Temple") then
    stop_on_altars = false
    crawl.setopt("explore_stop -= altars")
  elseif not stop_on_altars and you.god() == "No God" and you.branch() ~= "Temple" then
    stop_on_altars = true
    crawl.setopt("explore_stop += altars")
  end
end


----------------------------------
---- Automated temple actions ----
----------------------------------
function c_message_search_altars_in_temple(text, channel)
  if you.branch() == "Temple" then
    if text:find("explor") then
      crawl.sendkeys({ 6, "altar\r" })
    elseif text:find("welcomes you!") then
      crawl.sendkeys("X<\r")
    end
  end
end


-----------------------------
---- Ignore exit portals ----
-----------------------------
local ignore_exit_brances = { "Bailey", "Bazaar", "Gauntlet", "Ice Cave", "Ossuary", "Sewer", "Trove", "Volcano", "Ziggurat" }
local stop_on_portals = true

function ready_ignore_exits()
  local branch = you.branch()
  if stop_on_portals and util.contains(ignore_exit_brances, branch) then
    stop_on_portals = false
    crawl.setopt("explore_stop -= portals")
  elseif not stop_on_portals and not util.contains(ignore_exit_brances, branch) then
    stop_on_portals = true
    crawl.setopt("explore_stop += portals")
  end
end


----------------------------------------------
---- Ignore gauntlet msgs while exploring ----
----------------------------------------------
local ignoring_all_gauntlet = false
function c_message_ignore_gauntlet_msgs(text, channel)
  if ignoring_all_gauntlet then
    if you.branch() ~= "Gauntlet" or text:find("Done exploring.") or text:find("Partly explored") then
      ignoring_all_gauntlet = false
      crawl.setopt("runrest_ignore_message -= .*")
    end
  else
    if text:find("enter a gauntlet!") then
      ignoring_all_gauntlet = true
      crawl.setopt("runrest_ignore_message ^= .*")
    end
  end
end
}