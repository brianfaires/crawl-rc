include = pickup-alert/pa-util.rc
{

-------------------------------------------------------------------------------
---------------------------- Begin persistant data ----------------------------
-------------------------------------------------------------------------------
-- Lists of items previously alerted/picked up; and other values relevant to the decisions

if not rare_items or you.turns() == 0 then
  rare_items = {"broad axe", "executioner's axe", "eveningstar", "demon whip", "sacred scourge",
                "lajatang", "bardiche", "demon trident", "trishula",
                "quick blade", "demon blade", "double sword", "triple sword", "eudemon blade",
                "crystal plate armour", "gold dragon scales", "pearl dragon scales", "storm dragon scales", "shadow dragon scales", 
                "triple crossbow", "hand crossbow", "buckler", "kite shield", "tower shield" }
end

local function persist_rare_items()
  local cmd = "rare_items = {"
  local len = 0
  for _,v in ipairs(rare_items) do
    if v ~= "" then
      cmd = cmd .. "\"" .. v .. "\", "
      len = len+1
    end
  end
  
  return cmd .. "\"\"}" .. string.char(10)
end

if not added_rare_items_hook then
  table.insert(chk_lua_save, persist_rare_items)
  added_rare_items_hook = true
end


if not items_picked or you.turns() == 0 then
  items_picked = { "" }
end

local function persist_items_picked()
  local cmd = "items_picked = {"
  local len = 0
  for _,v in ipairs(items_picked) do
    if v ~= "" then
      cmd = cmd .. "\"" .. v .. "\", "
      len = len+1
    end
  end
  
  return cmd .. "\"\"}" .. string.char(10)
end

if not added_items_picked_hook then
  table.insert(chk_lua_save, persist_items_picked)
  added_items_picked_hook = true
end


if not items_alerted or you.turns() == 0 then
  items_alerted = { "" }
end

local function persist_items_alerted()
  local cmd = "items_alerted = {"
  local len = 0
  for _,v in ipairs(items_alerted) do
    if v ~= "" then
      cmd = cmd .. "\"" .. v .. "\", "
      len = len+1
    end
  end
  
  return cmd .. "\"\"}" .. string.char(10)
end

if not added_items_alerted_hook then
  table.insert(chk_lua_save, persist_items_alerted)
  added_items_alerted_hook = true
end


if not armour_high_score or you.turns() == 0 then
  armour_high_score = 0
  local eq = items.equipped_at("body armour")
  if eq then armour_high_score = get_armour_ac(eq) end
end

local function persist_armour_high_score()
  local cmd = "armour_high_score = " .. armour_high_score .. string.char(10)
  return cmd
end

if not added_armour_high_score_hook then
  table.insert(chk_lua_save, persist_armour_high_score)
  added_armour_high_score_hook = true
end


if not alerted_first_ranged_one_handed or you.turns() == 0 then
  alerted_first_ranged_one_handed = 0
  local eq = items.equipped_at("weapon")
  if eq and eq.is_ranged and get_hands(eq) == 1 then alerted_first_ranged_one_handed = 1 end
end

local function persist_alerted_first_ranged_one_handed()
  local cmd = "alerted_first_ranged_one_handed = " .. alerted_first_ranged_one_handed .. string.char(10)
  return cmd
end

if not added_first_ranged_one_handed_hook then
  table.insert(chk_lua_save, persist_alerted_first_ranged_one_handed)
  added_first_ranged_one_handed_hook = true
end

if not alerted_first_ranged_two_handed or you.turns() == 0 then
  alerted_first_ranged_two_handed = 0
  local eq = items.equipped_at("weapon")
  if eq and eq.is_ranged and get_hands(eq) == 2 then alerted_first_ranged_two_handed = 1 end
end

local function persist_alerted_first_ranged_two_handed()
  local cmd = "alerted_first_ranged_two_handed = " .. alerted_first_ranged_two_handed .. string.char(10)
  return cmd
end

if not added_first_ranged_two_handed_hook then
  table.insert(chk_lua_save, persist_alerted_first_ranged_two_handed)
  added_first_ranged_two_handed_hook = true
end

if not polearm_high_score or you.turns() == 0 then
  polearm_high_score = 0
  local eq = items.equipped_at("weapon")
  if eq and eq.weap_skill == "Polearms" then polearm_high_score = get_weap_dps(eq) + eq.accuracy + eq.plus end
end

local function persist_polearm_high_score()
  local cmd = "polearm_high_score = " .. polearm_high_score .. string.char(10)
  return cmd
end

if not added_polearm_high_score_hook then
  table.insert(chk_lua_save, persist_polearm_high_score)
  added_polearm_high_score_hook = true
end


if not unbranded_high_score or you.turns() == 0 then
  unbranded_high_score = 0
  local eq = items.equipped_at("weapon")
  if eq then unbranded_high_score = get_weap_dps(eq, true) + eq.accuracy + eq.plus end
end

local function persist_unbranded_high_score()
  local cmd = "unbranded_high_score = " .. unbranded_high_score .. string.char(10)
  return cmd
end

if not added_unbranded_high_score_hook then
  table.insert(chk_lua_save, persist_unbranded_high_score)
  added_unbranded_high_score_hook = true
end

if not weapon_high_score or you.turns() == 0 then
  weapon_high_score = 0
  local eq = items.equipped_at("weapon")
  if eq then weapon_high_score = get_weap_dps(eq) + eq.accuracy + eq.plus end
end

local function persist_weapon_high_score()
  local cmd = "weapon_high_score = " .. weapon_high_score .. string.char(10)
  return cmd
end

if not added_weapon_high_score_hook then
  table.insert(chk_lua_save, persist_weapon_high_score)
  added_weapon_high_score_hook = true
end


----------------------------------------
---- Accessors into persistant data ----
----------------------------------------
function pickup_item(it)
  local ret_val = false
  local name = it.name("plain")
  if not it.fully_identified then
    name = "+0 " .. name
  end

  if it.artefact then
    ret_val = true
  elseif not util.contains(items_picked, name) then
    -- Add to the table on pickup, in c_assign_invletter() hook function
    ret_val = true
  end
  
  -- Remove from rare_items if it's there
  for i,v in ipairs(rare_items) do
    if v ~= "" and name:find(v) then
      rare_items[i] = ""
      return true
    end
  end
  
  -- Returns true if we haven't picked up this item previously
  return ret_val
end


function c_assign_invletter_item_alerts(it)
  if it.class(true) == "weapon" or it.class(true) == "magical staff" or it.class(true) == "armour" then
    local name = it.name("plain")
    if not util.contains(items_picked, name) then
      insert_item_and_less_enchanted(items_picked, name)
      insert_item_and_less_enchanted(items_alerted, name)
      
      for i, v in ipairs(rare_items) do
        if name:find(v) then rare_items[i] = "" end
      end
      
      -- Update high scores
      if it.class(true) == "armour" then
         local ac = get_armour_ac(it)
        if ac > armour_high_score then armour_high_score = ac end
      elseif it.class(true) == "weapon" then
        if it.weap_skill == "Polearms" then
          local score = get_weap_dps(it) + it.accuracy + it.plus
          if score > polearm_high_score then
            polearm_high_score = score
            alert_item(it, "Strongest polearm")
          end
        end

        local score = get_weap_dps(it, false) + it.accuracy + it.plus
        if score > unbranded_high_score then unbranded_high_score = score end
    
        score = get_weap_dps(it) + it.accuracy + it.plus
        if score > weapon_high_score then weapon_high_score = score end
      end
    end
  end
end


function alert_item(it, alert_type)
  local name = it.name("plain")
  
  if (it.artefact or it.branded) and not it.fully_identified then
    if util.contains(items_alerted, name) then return end
    table.insert(items_alerted, name)
    show_alert_msg("Item alert, "..alert_type..": ", name)
    return
  end
  
  -- Prefix unidentified items with "+0"
  if not it.fully_identified then
    name = "+0 " .. name
  end

  if not util.contains(items_alerted, name) then
    if it.class(true) == "weapon" or it.class(true) == "magical staff" then
      show_alert_msg("Item alert, "..alert_type..": ", name.." "..get_weapon_info(it))
    elseif it.class(true) == "armour" then
      show_alert_msg("Item alert, "..alert_type..": ", name.." "..get_armour_info(it))	
    else
      show_alert_msg("Item alert, "..alert_type..": ", name)
    end

    insert_item_and_less_enchanted(items_alerted, name)
  end
  
  -- Returns true to make other code more concise; indicates that we tried to alert this item
  return true
end
crawl.setopt("runrest_stop_message += Item alert, ")


function get_rare_item_index(it)
  local qualname = it.name("qual")
  for i,v in ipairs(rare_items) do
    if v ~= "" and qualname:find(v) then 
    return i end
  end
  return -1
end

-----------------------------------------------------------------------------
---------------------------- End persistant data ----------------------------
-----------------------------------------------------------------------------
}