include = pickup-alert/pa-main.rc

{
loaded_pa_weapons = true

--------------------------
---- Begin inv arrays ----
--------------------------
-- Use these arrays to compare potential upgrades against entire inventory
local top_school = "unarmed combat"
local all_schools = { "axes", "maces & flails", "long blades", "short blades", "staves", "unarmed combat", "ranged weapons" }
local function set_top_school()
  local max = 0
  
  for v in iter.invent_iterator:new(all_schools) do
    if you.skill(v) > max then
      max = you.skill(v)
      top_school = v
    end
  end
end

local inv_max_dmg =     { melee_1 = 0, melee_1b = 0, melee_2 = 0, melee_2b = 0, ranged_1 = 0, ranged_1b = 0, ranged_2 = 0, ranged_2b = 0 }
local inv_max_dmg_acc = { melee_1 = 0, melee_1b = 0, melee_2 = 0, melee_2b = 0, ranged_1 = 0, ranged_1b = 0, ranged_2 = 0, ranged_2b = 0 }
local egos = { }


local function get_weap_type(it)
  local ret_val
  if it.is_ranged then ret_val = "ranged_"
  else ret_val = "melee_"
  end
  
  ret_val = ret_val..get_hands(it)
  if it.branded then ret_val = ret_val.."b" end
  
  return ret_val
end

local function enforce_dmg_floor(target, floor)
  if inv_max_dmg[target] < inv_max_dmg[floor] then
    inv_max_dmg[target] = inv_max_dmg[floor]
    inv_max_dmg_acc[target] = inv_max_dmg_acc[floor]
  end
end

local function generate_inv_weap_arrays()
  set_top_school()
  for k, _ in pairs(inv_max_dmg) do
    inv_max_dmg[k] = 0
    inv_max_dmg_acc[k] = 0
  end
  
  for cur in iter.invent_iterator:new(items.inventory()) do
    if cur.class(true) == "weapon" then
      if cur.ego() then table.insert(egos, cur.ego()) end
      
      local dmg = get_weap_dps(cur)
      local weap_type = get_weap_type(cur)
      if dmg > inv_max_dmg[weap_type] then
        inv_max_dmg[weap_type] = dmg
        local cur_plus = cur.plus
        if not cur_plus then cur_plus = 0 end
        inv_max_dmg_acc[weap_type] = cur.accuracy + cur_plus
      end
    end
  end
  
  -- Copy max_dmg from more restrictive categories to less restrictive
  enforce_dmg_floor("ranged_1", "ranged_1b")
  enforce_dmg_floor("ranged_2", "ranged_2b")
  enforce_dmg_floor("melee_1", "melee_1b")
  enforce_dmg_floor("melee_2", "melee_2b")

  enforce_dmg_floor("melee_1", "ranged_1")
  enforce_dmg_floor("melee_1b", "ranged_1b")
  enforce_dmg_floor("melee_2", "ranged_2")
  enforce_dmg_floor("melee_2b", "ranged_2b")

  enforce_dmg_floor("melee_2", "melee_1")
  enforce_dmg_floor("melee_2b", "melee_1b")
end
------------------------
---- End inv arrays ----
------------------------



-------------------------------
---- alert_early_weapons() ----
-------------------------------
-- Alert strong weapons early
local function alert_early_weapons(it)
  -- Alert really good usable ranged weapons
  if you.xl() <= 14 then
    if it.is_identified and it.is_ranged then
      if it.branded and it.plus >= 5 or it.plus >= 7 then
        if get_hands(it) == 1 or not items.equipped_at("shield") or you.skill("shield") <= 8 then
          return alert_item(it, "Ranged weapon9")
        end
      end
    end
  end

  -- Skip items when we're clearly going another route
  if you.skill(top_school) - you.skill(it.weap_skill) > 1.5*you.xl()+3 then return end


  if you.xl() <= 8 then
    if it.branded or it.plus and it.plus >= 4 then
      -- Make sure we don't alert a pure downgrade to something in inventory
      for inv in iter.invent_iterator:new(items.inventory()) do
        if inv.name("base") == it.name("base") then
          if inv.plus >= it.plus then
            if not it.branded then return end
            if it.ego() == inv.ego() then return end
          end
        end
      end
      
      return alert_item(it, "Early weapon")
    end
  end
end


----------------------------
---- Alert first ranged ----
----------------------------
local function alert_first_ranged(it)
  if not it.is_ranged then return false end
  
  if get_hands(it) == 2 then
    if items.equipped_at("shield") then return false end
    if alerted_first_ranged_two_handed == 0 then
      alerted_first_ranged_two_handed = 1
      for inv in iter.invent_iterator:new(items.inventory()) do
        if inv.is_ranged and get_hands(inv) == 2 then return true end
      end
      return alert_item(it, "Ranged weapon5")
    end
  else
    if alerted_first_ranged_one_handed == 0 then
      alerted_first_ranged_one_handed = 1
      for inv in iter.invent_iterator:new(items.inventory()) do
        if inv.is_ranged then return true end
      end
      return alert_item(it, "Ranged weapon6")
    end
  end
  
  return false
end

-----------------------------------
---- Begin pickup_weapons util ----
-----------------------------------
local function no_upgrade_possible(it, cur)
  if get_hands(it) > get_hands(cur) then return true end
  if it.is_ranged ~= cur.is_ranged then return true end
  if cur.weap_skill == "Polearms" and it.weap_skill ~= "Polearms" then return true end
  return false
end

local function get_dmg_delta(it, cur, penalty)
  if not penalty then penalty = 1 end
  
  local dmg_it = get_weap_dps(it)
  local dmg_cur = get_weap_dps(cur)
  local dmg_inv = inv_max_dmg[get_weap_type(it)]
  
  local delta
  if dmg_cur >= dmg_inv then 
    delta = dmg_it - dmg_cur
  else
    delta = dmg_it - dmg_inv
  end
  
  if delta > 0 then return delta * penalty end
  return delta / penalty
end

local function need_first_weapon()
  local unarmed = inv_max_dmg["melee_2"] == 0
  
  if not unarmed or you.skill("Unarmed Combat") > 0 then return false end
  if get_mut("claws", true) > 0 then return false end
  if get_mut("demonic touch", true) > 0 then return false end
  
  return true
end


--------------------------------
---- Begin pickup_weapons() ----
--------------------------------
local function pickup_weapon(it, cur)
  if cur.subtype() == it.subtype() then
    -- Exact weapon type match
    if it.artefact then return true end
    if cur.artefact then return false end
    if it.branded and it.is_identified and not cur.branded then return get_weap_dps(it) > 0.85*get_weap_dps(cur) end
    if cur.branded and not it.branded then return false end
    return it.ego() == cur.ego() and get_weap_dps(it) > get_weap_dps(cur)
  elseif you.skill(it.weap_skill) >= 0.5 * you.skill(cur.weap_skill) then
    -- A usable weapon school
    if no_upgrade_possible(it, cur) then return false end

    if it.artefact then return true end
    if cur.artefact then return false end
    if it.branded and not it.is_identified then return false end
    if cur.branded and not it.branded then return false end

    local dmg_delta = get_dmg_delta(it, cur)
    if dmg_delta > 0 then return true end
    local it_plus = if_el(it.plus, it.plus, 0)
    return dmg_delta == 0 and (it.accuracy+it_plus) > inv_max_dmg_acc[get_weap_type(it)]
  end
  
  return false
end


function pickup_weapons(it)
  if it.is_useless then return false end
  generate_inv_weap_arrays()
  
  for cur in iter.invent_iterator:new(items.inventory()) do
    if cur.class(true) == "weapon" then
      if pickup_weapon(it, cur) then
        return true
      end
    end
  end

  return need_first_weapon()
end

------------------------------
---- End pickup_weapons() ----
------------------------------

-------------------------------------------
---- Begin alert_interesting_weapons() ----
-------------------------------------------
local function alert_interesting_weapon(it, cur)
  if it.artefact and it.is_identified then return alert_item(it, "Artefact weapon") end
  
  if cur.subtype() == it.subtype() then
    -- Exact weapon type match
    if it.branded and it.ego() ~= cur.ego() then return alert_item(it, "New ego1") end
    if get_weap_dps(it) > inv_max_dmg[get_weap_type(it)] then return alert_item(it, "Stronger weapon0") end
  elseif you.skill(it.weap_skill) >= 0.5 * you.skill(cur.weap_skill) then
    -- A usable weapon school
    if it.is_ranged ~= cur.is_ranged then return false end
    
    --local penalty = 1
    --if it.weap_skill == top_school then penalty = 0.5 end
    local penalty = (you.skill(it.weap_skill)+8) / (you.skill(top_school)+8)
    
    if get_hands(it) == 2 and get_hands(cur) == 1 then
      -- Item requires an extra hand
      if it.branded and not cur.artefact and not cur.branded then
        if get_weap_dps(it) > 0.8*get_weap_dps(cur) then return alert_item(it, "2-handed weapon1") end
      end
      
      if not items.equipped_at("shield") then 
        if it.branded and not (it.ego() == "heavy" or it.ego() == "speed") and not util.contains(egos, it.ego()) then return alert_item(it, "New ego4") end
        if not (cur.branded or cur.artefact) and get_weap_dps(it) > inv_max_dmg[get_weap_type(it)] then return alert_item(it, "2-handed weapon2") end
        if (cur.branded or cur.artefact) and not it.branded and get_weap_dps(it) > inv_max_dmg[get_weap_type(it)] then return alert_item(it, "2-handed weapon3") end
      elseif you.skill("shields") <= 4 then
        -- Not really training shields; may be interested in big upgrades
        if penalty*get_weap_dps(it) >= inv_max_dmg["melee_2"] then return alert_item(it, "2-handed weapon4") end
      end
    else
      -- Item uses same number of hands or fewer
      if cur.artefact then return false end
      if it.branded then
        local dmg_delta = get_dmg_delta(it, cur, penalty)
        local dmg_delta_ratio = dmg_delta / get_weap_dps(it)
        
        if not cur.branded then
          if dmg_delta_ratio >= -0.2 then return alert_item(it, "New ego2") end
        elseif it.ego() == cur.ego() then
          if dmg_delta_ratio >= 0 then return alert_item(it, "Stronger weapon1") end
        elseif not util.contains(egos, it.ego()) then
          if dmg_delta_ratio >= -0.2 then return alert_item(it, "New ego3") end
        end
      else
        -- Not branded
        if cur.branded then
          --if get_weap_dps(it) > inv_max_dmg[get_weap_type(it)] then
          --    return alert_item(it, "Stronger weapon2")
          --end
        else
          local dmg_delta, other_acc
          if get_weap_dps(cur) > inv_max_dmg[get_weap_type(it)] then 
            dmg_delta = get_weap_dps(it) - get_weap_dps(cur)
            other_acc = cur.accuracy + cur.plus
          else
            dmg_delta = get_weap_dps(it) - inv_max_dmg[get_weap_type(it)]
            other_acc = inv_max_dmg_acc[get_weap_type(it)]
          end
          
          if dmg_delta > 0 then return alert_item(it, "Stronger weapon3") end
          local it_plus = if_el(it.plus, it.plus, 0)
          if dmg_delta == 0 and (it.accuracy+it_plus) > other_acc then return alert_item(it, "Higher accuracy") end
        end
      end      
    end
  end
end


local function alert_interesting_weapons(it)
  local ranged_weap_in_inv = false
  for cur in iter.invent_iterator:new(items.inventory()) do
    if cur.class(true) == "weapon" then
      if alert_interesting_weapon(it, cur) then return true end
      if cur.is_ranged then ranged_weap_in_inv = true end
    end
  end
  
  -- Alert for the first ranged weapon found (for 1 and 2 handed separately)
  if it.is_ranged and not ranged_weap_in_inv then
    if it.artefact or it.branded and it.plus >= 4 then
      if items.equipped_at("shield") then
        local qualname = it.name("qual")
        if qualname:find("hand crossbow") or qualname:find("sling") then
          return alert_item(it, "Ranged Weapon1")
        end
      else
        return alert_item(it, "Ranged Weapon2")
      end
    end
  end
  
  return false
end
-----------------------------------------
---- End alert_interesting_weapons() ----
-----------------------------------------

local function alert_weap_high_scores(it)
  local category = update_high_scores(it)
  if category then alert_item(it, category) end
end

function alert_weapons(it)
  if it.is_useless then return end
  if (it.artefact or it.branded) and not it.is_identified then return end
  
  alert_first_ranged(it)
  alert_early_weapons(it)
  alert_interesting_weapons(it)
  
  -- Skip high score alerts if not using weapons
  if inv_max_dmg["melee_2"] > 0 then alert_weap_high_scores(it)end
end
}